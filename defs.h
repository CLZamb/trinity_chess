#ifndef DEFS_H
#define DEFS_H

#include <cstdint>
#include <limits>
#include <iostream>

typedef uint64_t U64;

const int INF = std::numeric_limits<int>::max();
const int WHITE = 0, BLACK = 1;

const U64 PAWNSTART =
0b0000000011111111000000000000000000000000000000001111111100000000;
const U64 ROOKSTART =
0b1000000100000000000000000000000000000000000000000000000010000001;
const U64 KNIGHTSTART =
0b0100001000000000000000000000000000000000000000000000000001000010;
const U64 BISHOPSTART =
0b0010010000000000000000000000000000000000000000000000000000100100;
const U64 QUEENSTART =
0b0000100000000000000000000000000000000000000000000000000000001000;
const U64 KINGSTART =
0b0001000000000000000000000000000000000000000000000000000000010000;
const U64 ALLWHITESTART =
0b0000000000000000000000000000000000000000000000001111111111111111;
const U64 ALLBLACKSTART =
0b1111111111111111000000000000000000000000000000000000000000000000;

//Masking
const U64 ROWMASK[] = {
  0b0000000000000000000000000000000000000000000000000000000011111111,
  0b0000000000000000000000000000000000000000000000001111111100000000,
  0b0000000000000000000000000000000000000000111111110000000000000000,
  0b0000000000000000000000000000000011111111000000000000000000000000,
  0b0000000000000000000000001111111100000000000000000000000000000000,
  0b0000000000000000111111110000000000000000000000000000000000000000,
  0b0000000011111111000000000000000000000000000000000000000000000000,
  0b1111111100000000000000000000000000000000000000000000000000000000
};

//Clear
const U64 COLUMNCLEAR[] = {
  0b1111111011111110111111101111111011111110111111101111111011111110,
  0b1111110111111101111111011111110111111101111111011111110111111101,
  0b1111101111111011111110111111101111111011111110111111101111111011,
  0b1111011111110111111101111111011111110111111101111111011111110111,
  0b1110111111101111111011111110111111101111111011111110111111101111,
  0b1101111111011111110111111101111111011111110111111101111111011111,
  0b1011111110111111101111111011111110111111101111111011111110111111,
  0b0111111101111111011111110111111101111111011111110111111101111111,
};

static const U64 BLANK =  0b0000000000000000000000000000000000000000000000000000000000000000;
static const U64 FULL =   0b1111111111111111111111111111111111111111111111111111111111111111;

static const U64 NOT_H_FILE = 0b0111111101111111011111110111111101111111011111110111111101111111;
static const U64 NOT_GH_FILE = 0b0011111100111111001111110011111100111111001111110011111100111111;
static const U64 NOT_A_FILE = 0b1111111011111110111111101111111011111110111111101111111011111110;
static const U64 NOT_AB_FILE = 0b1111110011111100111111001111110011111100111111001111110011111100;

enum SquareIndices : int  {
  A1, B1, C1, D1, E1, F1, G1, H1,
  A2, B2, C2, D2, E2, F2, G2, H2,
  A3, B3, C3, D3, E3, F3, G3, H3,
  A4, B4, C4, D4, E4, F4, G4, H4,
  A5, B5, C5, D5, E5, F5, G5, H5,
  A6, B6, C6, D6, E6, F6, G6, H6,
  A7, B7, C7, D7, E7, F7, G7, H7,
  A8, B8, C8, D8, E8, F8, G8, H8,
  Squarebegin = A1, Squareend = H8 + 1
};

enum Piecetype : int {
  EMPTY, bP, bR, bN, bB, bQ, bK, wP, wR, wN, wB, wQ, wK
};

static const int VictimScore[13] =
{ 0, 10, 40, 20, 30, 50, 60, 10, 40, 20, 30, 50, 60};
/**
 * @brief An empty bitboard. (ie. the number 0)
 */
const U64 ZERO = U64(0);

/**
 * @brief A bitboard containing only the square a1. (ie. the number 1)
 */
const U64 ONE = U64(1);

/* MACROS */
#define CLRBIT(bb,sq) ((bb) &= ClearMask[(sq)])
#define SETBIT(bb,sq) ((bb) |= SetMask[(sq)])

/* GLOBALS */
extern U64 SetMask[64];
extern U64 ClearMask[64];

constexpr bool is_ok(SquareIndices s) {
  return s >= A1 && s <= H8;
}

constexpr bool IS_BLACK(int type) {
  return type > EMPTY && type < 7;
}

constexpr bool Valid_piece(int pieceType) {
  return (pieceType > EMPTY) && (pieceType < 13);
}

constexpr int MAX_MOVES = 256;

constexpr void printBitboard(const U64 bitboard) {
  for (int row = 7; row >= 0; --row) {
    for (int col = 0; col <= 7; ++col) {
      if (bitboard & (1ULL << ((row * 8) + col))) {
        std::cout << "1 ";
      } else {
        std::cout << "0 ";
      }
    }
    std::cout << std::endl;
  }
  std::cout  << std::endl;
}

constexpr unsigned int Get_from_sq(int move) {
  return move & 0x3f;
}

constexpr unsigned int Get_to_sq(int move) {
  return (move >> 6) & 0x3f;
}

constexpr unsigned int Get_captured(int move) {
  return (move >> 12) & 0xf;
}

constexpr unsigned int Get_piece(int move) {
  return (move >> 17) & 0xf;
}


const U64 RookMagic[64] = {
  0x2380004000201080ULL, 0x2040100020004001ULL, 0x180086002100080ULL, 0x4080048008021000ULL,
  0xa00086004100200ULL, 0x80018004004200ULL, 0x400640810030082ULL, 0x4280014100102080ULL,
  0x80a002600450080ULL, 0x4005004004802100ULL, 0x81004104102000ULL, 0x3441000921021000ULL,
  0x2002010460008ULL, 0x806001004020008ULL, 0x3541002100140200ULL, 0x25000260810002ULL,
  0x800040042002d2ULL, 0x10104000442000ULL, 0x50028010802000ULL, 0xf0008028001080ULL,
  0x8008008040080ULL, 0x10100080c0002ULL, 0xa00040002010890ULL, 0xa42020000670084ULL,
  0xc80084040002000ULL, 0x200640005006ULL, 0x51410100200091ULL, 0x101c900201000ULL,
  0x21080100050010ULL, 0x242001200190410ULL, 0x1a1400081011ULL, 0x1204200140091ULL,
  0x1000400020800088ULL, 0x1100442000401000ULL, 0x204102001004100ULL, 0x4006102202004008ULL,
  0x28010400800881ULL, 0x80100040100081eULL, 0x101100e24000148ULL, 0x44004412000981ULL,
  0x480094220084000ULL, 0x10200050024002ULL, 0x61002000110042ULL, 0x5005001890021ULL,
  0x8010500090010ULL, 0x9000864010002ULL, 0x501100142440008ULL, 0x12a040040820001ULL,
  0xa44408209002200ULL, 0x1010084000200040ULL, 0x208012004200ULL, 0x2243001001900ULL,
  0x1022000810042200ULL, 0x1c22000830040600ULL, 0x800100508220400ULL, 0x1000a44820300ULL,
  0x81430110800021ULL, 0x80401100260082ULL, 0x2001010830c1ULL, 0x200210049045001ULL,
  0x42060088209c3042ULL, 0x700a604001811ULL, 0x80201100084ULL, 0x168004a21040086ULL
};

const U64 BishopMagic[64] = {
  0x4151002060840ULL, 0x403060403020001ULL, 0x1800c400800010ULL, 0x2848c100080024ULL,
  0x84050420e00001ULL, 0x4406090460180001ULL, 0x4014120846090024ULL, 0x4808150c01044004ULL,
  0x40448020400ULL, 0x100850a2020400b4ULL, 0x4042440800810080ULL, 0x7092440c02805000ULL,
  0x200040308220000ULL, 0xe08420804e6ULL, 0x100020801043008ULL, 0x1801021200822800ULL,
  0x10002002624800ULL, 0x308001202081202ULL, 0x480800c418011010ULL, 0x822000406120001ULL,
  0x204000822080560ULL, 0x4004082202020200ULL, 0x2012010c48140408ULL, 0x2021000022982400ULL,
  0x20080110100103ULL, 0x14200010110100ULL, 0x204808100b014100ULL, 0x20090080040c0ULL,
  0x4001010040104011ULL, 0x3910a00040a0111ULL, 0x4005140002c20820ULL, 0x5243020001055102ULL,
  0x2002084050041000ULL, 0x24a02202c300124ULL, 0x2882030102900041ULL, 0x10510801040040ULL,
  0x4000404040440100ULL, 0x1008050102080880ULL, 0x410800a401010100ULL, 0x2004211240062410ULL,
  0x22d11301004401cULL, 0x582828010c04ULL, 0xa10140024020808ULL, 0xc20004200800800ULL,
  0x4202022a000400ULL, 0x414112020e000c10ULL, 0x100441940c000509ULL, 0xa102c0440c10080ULL,
  0x4081010802411801ULL, 0x414404404200001ULL, 0x20004c4454100801ULL, 0x810000a10440000ULL,
  0x80080803040804ULL, 0x540408020000ULL, 0x1020200202004820ULL, 0x484108200510230ULL,
  0x600e010051042020ULL, 0x4404880880ULL, 0x428044044400ULL, 0x1400000208420202ULL,
  0x4000004004904400ULL, 0x10200a1408104101ULL, 0x48004002184200a0ULL, 0x2041000850100ULL
};

static const int BitTable[64] = {
  63, 30, 3,  32, 25, 41, 22, 33,
  15, 50, 42, 13, 11, 53, 19, 34,
  61, 29, 2,  51, 21, 43, 45, 10,
  18, 47, 1,  54, 9,  57, 0,  35,
  62, 31, 40, 4,  49, 5,  52, 26,
  60, 6,  23, 44, 46, 27, 56, 16,
  7,  39, 48, 24, 59, 14, 12, 55,
  38, 28, 58, 20, 37, 17, 36, 8
};

static const int RBits[64] = {
  12, 11, 11, 11, 11, 11, 11, 12,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  11, 10, 10, 10, 10, 10, 10, 11,
  12, 11, 11, 11, 11, 11, 11, 12
};

static const int BBits[64] = {
  6, 5, 5, 5, 5, 5, 5, 6,
  5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 7, 7, 7, 7, 5, 5,
  5, 5, 7, 9, 9, 7, 5, 5,
  5, 5, 7, 9, 9, 7, 5, 5,
  5, 5, 7, 7, 7, 7, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5,
  6, 5, 5, 5, 5, 5, 5, 6
};

static const int KnightTable[64] = {
  -10, -2, -3, -3, -3, -3, -2, -10,
  -4, -2, 0, 0, 0, 0, -2, -2,
  -3, 0, 7, 3, 3, 7, 0, -3,
  -3, 1, 3, 8, 8, 3, 1, -3,
  -3, 0, 3, 8, 8, 3, 0, -3,
  -3, 1, 7, 3, 3, 7, 1, -3,
  -4, -2, 0, 1, 1, 0, -2, -2,
  -10, -4, -3, -3, -3, -3, -4, -10,
};

static const int PawnTable[64] = {
  0, 0, 0, 0, 0, 0, 0, 0,
  2, 2, 0, -2, -2, 0, 2, 2,
  1, 0, 0, 1, 1, 0, 0, 1,
  0, 0, 2, 4, 4, 2, 0, 0,
  1, 1, 1, 2, 2, 1, 1, 1,
  2, 2, 2, 4, 4, 2, 2, 2,
  4, 4, 4, 6, 6, 4, 4, 4,
  0, 0, 0, 0, 0, 0, 0, 0
};

static const int BishopTable[64] = {
  -4, -2, -2, -2, -2, -2, -2, -4,
  -2, 0, 0, 0, 0, 0, 0, -2,
  -2, 0, 1, 2, 2, 1, 0, -2,
  -2, 1, 1, 2, 2, 1, 1, -2,
  -2, 0, 2, 2, 2, 2, 0, -2,
  -2, 2, 2, 2, 2, 2, 2, -2,
  -2, 1, 0, 0, 0, 0, 1, -2,
  -4, -2, -2, -2, -2, -2, -2, -4,
};

static const int RookTable[64] = {
  0, 0, 0, 0, 0, 0, 0, 0,
  1, 2, 2, 2, 2, 2, 2, 1,
  -1, 0, 0, 0, 0, 0, 0, -1,
  -1, 0, 0, 0, 0, 0, 0, -1,
  -1, 0, 0, 0, 0, 0, 0, -1,
  -1, 0, 0, 0, 0, 0, 0, -1,
  -1, 0, 0, 0, 0, 0, 0, -1,
  0, 0, 0, 1, 1, 0, 0, 0
};

static const int QueenTable[64] = {
  //queen
  -4, -2, -2, -1, -1, -2, -2, -4,
  -2, 0, 0, 0, 0, 0, 0, -2,
  -2, 0, 1, 1, 1, 1, 0, -2,
  -1,  0, 1, 1, 1, 1, 0, -1,
  0 , 0, 1, 1, 1, 1, 0, -1,
  -2, 1, 1, 1, 1, 1, 0, -2,
  -2, 0, 1, 0, 0, 0, 0, -2,
  -4, -2, -2, -1, -1, -2, -2, -4
};

static const int MIRROR64[64] = {
  56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 ,
  48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 ,
  40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 ,
  32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 ,
  24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 ,
  16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 ,
  8 , 9, 10 , 11 , 12 , 13 , 14 , 15 ,
  0 , 1, 2  , 3 ,  4 , 5 , 6  , 7
};

#endif /* DEFS_H */
